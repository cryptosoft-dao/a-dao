#include "imports/stdlib.fc";

;; Operation codes

const int op::vote = 0;
const int op::initiate_voting = 1;
const int op::change_config = 2;
const int op::exit_from_Root = 3;

;; Voting types

const int vt::add_member = 0;
const int vt::terminate_membership = 1;
const int vt::route_revenue = 2;
const int vt::arbitrary_transaction = 3;
const int vt::change_config = 4;

;; Global variables

global int max_members;
global int agreement_percent;
global cell members; ;; key: int index // value (cell): slice member_addr,  int voice_strength, int revenue_position
global int total_voices;
global int total_revenue_points;
global cell votings; ;; key: int index // value (cell): int voting_type, int deadline, cell voting_info, cell votes, int total_votes
global slice cached_voting; ;; int voting_type, int deadline, cell voting_info, cell votes, int total_votes

() save_data() impure inline {

    active? = 0;
    total_voices = 0;

    set_data(
        begin_cell()
            .store_uint(active?)
            .store_uint(max_members, 8)
            .store_uint(agreement_percent, 8)
            .store_dict(members)
            .store_uint(total_voices, 32)
            .store_uint(total_revenue_points, 32)
            .store_dict(votings)
        .end_cell()
    );
}

() load_data() impure inline { 

    slice ds = get_data().begin_parse();

    config = ds~load_ref();
    members = ds~load_dict();
    total_voices = ds~load_uint(32);
    total_revenue_points = ds~load_uint(32);
    votings = ds~load_dict();
    ds.end_parse();
}

() clear_votings_queue() inline {

    (int key, slice value, int success?) = votings.udict_get_min?(256);

    while (success?) {
        (key, value, success?) = votings.udict_get_next?(256, key);

        value~skip_bits(8); ;; skip voting_type
        value~load_uint(32); ;; deadline
    }
}

() add_cached_voting() inline {

    (int key, slice value, int success?) = udict_get_max?(votings, 64);

    if (key = 255) {
        clear_votings_queue(votings);
    }

    if (success?) {
        votings~udict_add?(64, key + 1, cached_voting);
    }
}

(int) check_membership(slice sender_address, int member_index) inline {

    (slice member_info, int success?) = members.udict_get?(8, member_index);

    if (equal_slices(sender_address, member_info~load_msg_addr())) {
        return true;
    } else {
        return false;
    }
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    ;; if no members

    if (members == ) {
         
    }

    if (active? = 0) { ;; deploy

    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    if (flags & 1) {  ;; ignore bounced messages
        return ();
    }

    int op = in_msg_body~load_uint(32);

    load_data();

    if (op == op::vote) {

        int member_index = in_msg_body~load_uint(8);
        int voting_index = in_msg_body~load_uint(8);

        ;; get voting by voting_index

        (slice voting, int found?) = votings.udict_get?(8, voting_index);
        throw_unless(200, found?);

        ;; Parse voting

        int voting_type = voting~load_uint(4); ;; voting_type
        int deadline = voting~load_uint(32); ;; deadline
        cell voting_info = voting~load_ref(); ;; voting_info
        cell votes = voting~load_ref(); ;; votes
        int total_votes = voting~load_uint(32); ;; total_votes

        ;; add vote

        int success? = votes~udict_add?(8, member_index, voting);

        ;; get info about member from members

        (slice member_info, int success?) = members.udict_get?(8, member_index);
        throw_unless(111, success?); ;; throw if there is not such a member

        slice member_addr = member_info~load_msg_addr();
        int voice_strength = member_info~load_uint(32);
        int revenue_position = member_info~load_uint(32);

        ;; Calculate new total voting

        int new_total_votes = total_votes + voice_strength;

        ;; Parse config

        slice config_cs = config.begin_parse();
        int max_members = config_cs~load_uint(8); ;; skip 
        int agreement_percent = config_cs~load_uint(8);

        int votes_for_approval = agreement_percent / total_voices * 100;

        ;; Do actions in case of approval, otherwise save vote

        if (new_total_votes > votes_for_approval) {

            slice voting_info_cs = voting_info.begin_parse();

            ;; Do actions

            if (voting_type == vt::add_member) {

                (int last_member_index, _, _) = votings.udict_get_max?(8);
                int new_member_index = last_member_index + 1;

                voting_info_cs~load_msg_addr(); ;; slice member_to_add_addr
                int voice_strength = voting_info_cs~load_uint(32);
                voting_info_cs~load_uint(32); ;; int revenue_position

                ;; Add new member to dict

                if (new_member_index < max_members) {
                    members~udict_add?(8, new_member_index, voting_info_cs);
                }

                ;; Increase total voices

                total_voices += voice_strength;

                save_data();
                return ();

            }

            if (voting_type == vt::terminate_membership) {

                int member_to_delete_index = voting_info_cs~load_uint(8);

                ;; Delete member from dict

                members.udict_delete?(8, member_to_delete_index);

                ;; Decrease total voices

                total_voices -= voice_strength;

                save_data();
                return ();

            }

            if (voting_type == vt::route_revenue) {

                int revenue_to_route = voting_info_cs~load_uint(32); ;; int amount

                ;; Route revenue

                (int key, slice value, int success?) = members.udict_get_min?(64);

                while (success?) {

                    slice member_addr = member_info~load_msg_addr();
                    int voice_strength = member_info~load_uint(32);
                    int revenue_position = member_info~load_uint(32);

                    int member_revenue = revenue_to_route / total_voices * voice_strength;
                
                    var msg = begin_cell()
                        .store_uint(0x10, 6)
                        .store_slice(member_addr)
                        .store_coins(member_revenue)
                        .store_uint(0, 107)
                        .end_cell();
                    send_raw_message(msg, 0);
                }

                save_data();
                return ();

            }

            if (voting_type == vt::arbitrary_transaction) {

                slice destination = voting_info_cs~load_msg_addr(); ;; destination
                int amount = voting_info_cs~load_uint(32); ;; amount
                cell msg_body = voting_info_cs~load_ref(); ;; msg_body

                ;; Arbitrary transaction

                var msg = begin_cell()
                        .store_uint(0x18, 6)
                        .store_slice(destination)
                        .store_coins(amount)
                        .store_uint(1, 107)
                        .store_ref(msg_body)
                    .end_cell();
                send_raw_message(msg, 0);

                save_data();
                return ();

            }

            if (voting_type == vt::change_config) {

                config = voting_info_cs~load_ref(); ;; parse and save new config

                save_data();
                return ();

            }

            if (voting_type == vt::deactivate_root) {

                max_members = in_msg_body~load_uint(8);
                agreement_percent = in_msg_body~load_uint(8);

                save_data();
                return ();

            }

        } else {

            votes~udict_add?(8, voting_index, voting);
        }

    }

    ;; Initiate voting msg: int member_index, int voting_index, cell voting_cell

    if (op == op::initiate) {

        int member_index = in_msg_body~load_uint(8);

        check_membership(sender_address, member_index);

        int voting_index = in_msg_body~load_uint(8);
        cell voting_cell = in_msg_body~load_ref();

        slice voting_cell_cs = voting_cell.begin_parse();

        ;; Check voting info

        int voting_type = voting_cell_cs.preload_uint(4);
        int deadline = voting_cell_cs.preload_uint(32);
        cell voting_info = voting_cell_cs.preload_ref();
        cell votes = voting_cell_cs.preload_ref();
        int total_votes = voting_cell_cs.preload_uint(32);

        slice voting_info_cs = voting_info.begin_parse();

        ;; Index 0: Add member
        ;; voting_info: slice member_to_add_addr

        if (voting_type == vt::add_member) {

            ;; Check voting_info for initiating adding member

            voting_info_cs~load_msg_addr(); ;; slice member_to_add_addr
            voting_info_cs~load_uint(32); ;; int voice_strength
            voting_info_cs~load_uint(32); ;; int revenue_position

            add_cached_voting(votings, voting_cell);

            save_data();
            return ();

        }

        ;; Index 1: Eliminate member
        ;; voting_info: slice member_to_eliminate_addr

        if (voting_type == vt::terminate_membership) {

            ;; Check voting_info for initiating termination of membership

            voting_info_cs~load_msg_addr(); ;; slice member_to_eliminate_addr

            add_cached_voting(votings, voting_cell);

            save_data();
            return ();

        }

        ;; Index 2: Revenue routing voting
        ;; voting_info: int amount

        if (voting_type == vt::route_revenue) {

            ;; Check voting_info for initiating revenue routing

            voting_info_cs~load_uint(32); ;; int amount

            add_cached_voting(votings, voting_cell);

            save_data();
            return ();

        }

        ;; Index 3: Arbitrary transaction
        ;; voting_info: slice destination, int amount, cell msg_body

        if (voting_type == vt::arbitrary_transaction) {

            ;; Check voting_info for initiating arbitrary transaction

            voting_info_cs~load_msg_addr(); ;; destination
            voting_info_cs~load_uint(32); ;; amount
            voting_info_cs~load_ref(); ;; msg_body

            add_cached_voting(votings, voting_cell);

            save_data();
            return ();

        }

        ;; Index 4: Initiate change config
        ;; voting_info: 

        if (voting_type == vt::change_config) {

            ;; Check voting_info for changing config

            voting_info_cs~load_uint(8); ;; max_members
            voting_info_cs~load_uint(8); ;; agreement_percent

            add_cached_voting(votings, voting_cell);

            save_data();
            return ();

        }

        if (voting_type == vt::deactivate_contract) {

            save_data();
            return ();

        }

    }

    if (op == op::exit_from_root) {

        int member_index = in_msg_body~load_uint(8);

        check_membership(sender_address, member_index);

        members.udict_delete?(8, member_index);

        save_data();
        return ();

    }

    throw(0xffff);

}